/** * com.upyun.api * Upload.java */package com.yssj.upyun;import java.io.File;import java.io.IOException;import java.util.Date;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.StatusLine;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.util.EntityUtils;import org.json.JSONException;import org.json.JSONObject;import com.yssj.YJApplication;import com.yssj.YUrl;import com.yssj.utils.BitmapCompress;import com.yssj.utils.LogYiFu;import com.yssj.utils.SharedPreferencesUtil;/** * Upload.java * * @author vincent chen * @since 2012 Jun 18, 2012 4:52:49 PM */public class Uploader {    public static final long EXPIRATION = new Date().getTime() / 1000 + 1000 * 5 * 10; // 过期时间，必须大于当前时间    ////	//正式环境//	public static  String TEST_API_KEY = "M3s2N+dRDbjzzRATbBP5IbYIThc="; // 正式使用的表单api验证密钥//	public static  String BUCKET = "yssj668"; // 存储空间    public static  String TEST_API_KEY = YUrl.TEST_API_KEY; // 正式使用的表单api验证密钥    public static  String BUCKET = YUrl.BUCKET; // 存储空间//	//测试环境//    public static final String TEST_API_KEY = setTEST_API_KEY(); // 测试使用的表单api验证密钥//    public static final String BUCKET = setBUCKET(); // 存储空间//	    public static String setTEST_API_KEY() {        boolean flag = SharedPreferencesUtil.getBooleanData(YJApplication.instance, "change_change", false);        if (flag) {            return "T8CDRaESN017je6QcRjYqmjxXkw=";        } else {            return "M3s2N+dRDbjzzRATbBP5IbYIThc=";        }    }    public static String setBUCKET() {        boolean flag = SharedPreferencesUtil.getBooleanData(YJApplication.instance, "change_change", false);        if (flag) {            return "yssj-real-test";        } else {            return "yssj668";        }    }    /**     * 上传文件到又拍云存储。 目前根据android系统版本的不同，只支持小文件上传。     *     * @param policy     * @param signature     * @param bucket     * @param sourceFile     * @return     * @throws UpYunException     */    public static String upload(String policy, String signature, String bucket, String sourceFile)            throws UpYunException {        String returnStr = null;        if (bucket == null || bucket.equals("")) {            throw new UpYunException(10, "bucket can not be empty.");        }        if (sourceFile == null || sourceFile.equals("")) {            throw new UpYunException(11, "source file can not be empty.");        }        if (policy == null || policy.equals("")) {            throw new UpYunException(12, "policy can not be empty.");        }        if (signature == null || signature.equals("")) {            throw new UpYunException(13, "signature can not be empty.");        }        HttpClient httpclient = new DefaultHttpClient();        HttpPost httppost = new HttpPost("http://v0.api.upyun.com/" + bucket + "/");        try {            SimpleMultipartEntity sme = new SimpleMultipartEntity();            sme.addPart("policy", policy);            sme.addPart("signature", signature);            String filePath = BitmapCompress.getSmallBitmapPath(sourceFile);            sme.addPart("file", new File(filePath));            httppost.setEntity(sme);            HttpResponse response = httpclient.execute(httppost);            StatusLine statusLine = response.getStatusLine();            int code = statusLine.getStatusCode();            String str = EntityUtils.toString(response.getEntity());            if (code != HttpStatus.SC_OK) {                JSONObject obj = new JSONObject(str);                String msg = obj.getString("message");                msg = new String(msg.getBytes("UTF-8"), "UTF-8");                String url = obj.getString("url");                long time = obj.getLong("time");                boolean isSigned = false;                String signString = "";                if (!obj.isNull("sign")) {                    signString = obj.getString("sign");                    isSigned = true;                } else if (!obj.isNull("non-sign")) {                    signString = obj.getString("non-sign");                    isSigned = false;                }                UpYunException exception = new UpYunException(code, msg);                exception.isSigned = isSigned;                exception.url = url;                exception.time = time;                exception.signString = signString;                LogYiFu.e("message", exception.message);                throw exception;            } else {                JSONObject obj = new JSONObject(str);                returnStr = obj.getString("url");            }        } catch (ClientProtocolException e) {            e.printStackTrace();            throw new UpYunException(30, e.getMessage());        } catch (IOException e) {            e.printStackTrace();            throw new UpYunException(31, e.getMessage());        } catch (OutOfMemoryError e) {            e.printStackTrace();            throw new UpYunException(33, e.getMessage());        } catch (JSONException e) {            throw new UpYunException(32, e.getMessage());        }        return returnStr;    }}